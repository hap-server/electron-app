# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:12

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
    paths:
        - node_modules/

build:
    stage: build
    script:
        - apt update && apt install zip

        - npm --color="always" install
        - npx tsc

        # npm package
        - PACKAGE_PATH=`npm --color="always" pack`
        - mv $PACKAGE_PATH hap-server-electron-app.tgz

        # macOS
        - npx electron-packager . Home --platform darwin --arch x64 --ignore "src|data|\.(d\.ts|map|git)|package-lock|tsconfig"
        - cd Home-darwin-x64
        - zip -r ../Home.app.zip Home-darwin-x64/Home.app/*
        - cd ..

        # Linux + dpkg
        - npx electron-packager . Home --platform linux --arch x64 --ignore "src|data|\.(d\.ts|map|git)|package-lock|tsconfig"

        - npx electron-installer-debian --src Home-linux-x64 --dest . --arch amd64
        - mv Home_*_amd64.deb hap-server-electron-app.dpkg

        # Windows
        # - npx electron-packager . Home --platform win32 --arch x64 --ignore "src|data|\.(d\.ts|map|git)|package-lock|tsconfig"
    artifacts:
        paths:
            - dist
            - hap-server-electron-app.tgz

            - Home-darwin-x64
            - Home-linux-x64
            # - Home-win32-x64

            - Home.app.zip
            - hap-server-electron-app.dpkg
    only:
        changes:
            - .gitlab-ci.yml
            - package-lock.json
            - tsconfig.json
            - src/**/*

audit:
    stage: test
    script:
        - npm audit --json > npm-audit.json || true
        - npm --color="always" audit
    artifacts:
        paths:
            - npm-audit.json
        when: always
    only:
        changes:
            - .gitlab-ci.yml
            - package-lock.json
    cache:
        paths:
            - node_modules/
        policy: pull
    when: always
    allow_failure: true

publish-npm:
    stage: deploy
    script:
        - cd release
        - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        - npm --color="always" publish
    dependencies:
        - build
    only:
        refs:
            - /^v.*$/
        variables:
            - $NPM_TOKEN
    except:
        - branches
    cache:
        paths:
            - node_modules/
        policy: pull

publish-github:
    stage: deploy
    script:
        - cd release
        - echo "//npm.pkg.github.com/:_authToken=${GITHUB_NPM_TOKEN}" > .npmrc
        - npm --color="always" --registry=https://npm.pkg.github.com/ publish
    dependencies:
        - build
    only:
        refs:
            - /^v.*$/
        variables:
            - $GITHUB_NPM_TOKEN
    except:
        - branches
    cache:
        paths:
            - node_modules/
        policy: pull
